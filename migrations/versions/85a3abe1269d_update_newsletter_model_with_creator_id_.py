"""Update Newsletter model with creator_id and sync User model changes

Revision ID: 85a3abe1269d
Revises: 20bee2712634
Create Date: 2025-05-15 18:09:53.269478

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '85a3abe1269d'
down_revision = '20bee2712634'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if tables exist before creating - this is a manual adjustment
    # conn = op.get_bind()
    
    # op.create_table('blog_categories', # Assuming this table already exists
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('name', sa.String(length=100), nullable=False),
    # sa.Column('slug', sa.String(length=100), nullable=False),
    # sa.Column('description', sa.String(length=300), nullable=True),
    # sa.PrimaryKeyConstraint('id'),
    # sa.UniqueConstraint('slug')
    # )
    # op.create_table('blog_posts', # Assuming this table already exists
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('title', sa.String(length=200), nullable=False),
    # sa.Column('slug', sa.String(length=200), nullable=False),
    # sa.Column('content', sa.Text(), nullable=False),
    # sa.Column('excerpt', sa.String(length=300), nullable=True),
    # sa.Column('featured_image', sa.String(length=255), nullable=True),
    # sa.Column('is_published', sa.Boolean(), nullable=True),
    # sa.Column('views_count', sa.Integer(), nullable=True),
    # sa.Column('author_id', sa.Integer(), nullable=True),
    # sa.Column('created_at', sa.DateTime(), nullable=True),
    # sa.Column('updated_at', sa.DateTime(), nullable=True),
    # sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    # sa.PrimaryKeyConstraint('id'),
    # sa.UniqueConstraint('slug')
    # )
    # op.create_table('blog_comments', # Assuming this table already exists
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('content', sa.Text(), nullable=False),
    # sa.Column('author_name', sa.String(length=100), nullable=False),
    # sa.Column('author_email', sa.String(length=120), nullable=False),
    # sa.Column('is_approved', sa.Boolean(), nullable=True),
    # sa.Column('post_id', sa.Integer(), nullable=False),
    # sa.Column('created_at', sa.DateTime(), nullable=True),
    # sa.ForeignKeyConstraint(['post_id'], ['blog_posts.id'], ),
    # sa.PrimaryKeyConstraint('id')
    # )
    # op.create_table('blog_post_categories', # Assuming this table already exists
    # sa.Column('post_id', sa.Integer(), nullable=False),
    # sa.Column('category_id', sa.Integer(), nullable=False),
    # sa.ForeignKeyConstraint(['category_id'], ['blog_categories.id'], ),
    # sa.ForeignKeyConstraint(['post_id'], ['blog_posts.id'], ),
    # sa.PrimaryKeyConstraint('post_id', 'category_id')
    # )
    
    # op.drop_table('user') # Be cautious with this, ensure 'user' table is not your actual 'users' table and is safe to drop.
                          # If unsure, comment it out.

    # The following operations on 'newsletters' and 'users' are likely desired.
    with op.batch_alter_table('newsletters', schema=None) as batch_op:
        batch_op.add_column(sa.Column('creator_id', sa.Integer(), nullable=True))
        # The batch_op.drop_column('created_by') below should handle removing the column.
        # If there was an FK on created_by, dropping the column might fail if the DB enforces FKs to be dropped first.
        # However, the current error is not finding a constraint by a specific name.
        # We'll rely on drop_column and if it fails due to an existing FK, we'll get a different error.
        batch_op.create_foreign_key('fk_newsletters_creator_id_users', 'users', ['creator_id'], ['id'])
        batch_op.drop_column('created_by')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password_changed', sa.Boolean(), server_default=sa.false(), nullable=False))
        # The autogenerated alter_column for nullable=False might not be what we need if the column is new.
        # If password_changed is a NEW column, add_column is more appropriate as above.
        # If it existed and was nullable=True, then alter_column is fine.
        # The previous model edit added it as nullable=False, default=False.
        # If `add_column` was used, this `alter_column` might be redundant or error if types are incompatible.
        # For safety, if `add_column` already set nullable=False correctly, this can be commented.
        # batch_op.alter_column('password_changed',
        #        existing_type=sa.BOOLEAN(),
        #        nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        # batch_op.alter_column('password_changed',
        #        existing_type=sa.BOOLEAN(),
        #        nullable=True)
        batch_op.drop_column('password_changed')

    with op.batch_alter_table('newsletters', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), nullable=True))
        batch_op.drop_constraint('fk_newsletters_creator_id_users', type_='foreignkey')
        # If 'created_by' originally had an FK, it would need to be recreated here.
        # For simplicity, assuming it didn't or its recreation is not critical for downgrade.
        batch_op.drop_column('creator_id')

    # op.create_table('user', # If we commented out drop_table in upgrade, we might not want to recreate it here
    # sa.Column('id', sa.INTEGER(), nullable=False),
    # sa.Column('username', sa.VARCHAR(length=64), nullable=False),
    # sa.Column('email', sa.VARCHAR(length=120), nullable=False),
    # sa.Column('password_hash', sa.VARCHAR(length=256), nullable=False),
    # sa.Column('is_admin', sa.BOOLEAN(), nullable=True),
    # sa.Column('created_at', sa.DATETIME(), nullable=True),
    # sa.PrimaryKeyConstraint('id'),
    # sa.UniqueConstraint('email'),
    # sa.UniqueConstraint('username')
    # )
    # op.drop_table('blog_post_categories') # If we commented out create_table, don't drop
    # op.drop_table('blog_comments')      # If we commented out create_table, don't drop
    # op.drop_table('blog_posts')         # If we commented out create_table, don't drop
    # op.drop_table('blog_categories')     # If we commented out create_table, don't drop
    # ### end Alembic commands ###
